- Classes

As classes não são obrigatórias no TypeScript, mas são úteis.

Primeira coisa, crie um arquivo classes.ts e crie uma class e dentro dela defina as propriedades.
Para poder criar o objeto, precisamos de um metodo, que é o constructor(), e o constructor recebe as propriedades com qual 
o meu objeto vai receber.

Recebendo esses valores, já conseguimos assinalar esses valores utilizando o this. que é o objeto dessa class
e a propriedade ex: this.name que vai receber o valor de name que foi passado.

Feito isso, crie um objeto dessa class e faça console.log

No terminal instale nodenom
npm install -g nodemon
depois de instalado:
nodemon dist/classes.js ou onde estiver o arquivo de js 

-> Outra coisa que podemos fazer é criar um método, dentro do nosso objeto.
Vamos criar um método logDetails, não vai receber nada e vai retornar um void, que vai ser um console.log

Agora vamos criar uma class que extends a class que já temos. Como assim extends?
Podemos criar uma class que tera suas propriedades e métodos dela, mas além das coisas dela, terá as coisas de quem 
ela está estendendo. 

Como faz isso?

criamos uma class class CharAccount que vai estender e o nome da classe que está estendendo.
Class criada com suas propriedades novas, crie o constructor(), no constructor ele via receber todos o valores:
Das propriedades que ele tem mais as que ele herdou

Para constructor trabalhar com as propriedades que a class herdou, usamos super() e passamos as propriedades dentro de super
Ex: super(name, age)

Agora crie um objeto

-> Modifiers


O que é? 
Digamos que tem alguma propriedade que eu não quero que ela não seja modificada depois da criação.

Como assim?
Temos gui e as propriedades dele, mas digamos que eu queira modificar o nickname do gui por qualquer coisa
gui.nickname = 'das'
se vc fizer console.log do todo objeto, verá que o nickname de gui que era Goura, agora é Das. Ou seja, mudou.

Como eu posso fazer para não permitir que isso aconteça?

Private

existe algumas formas, a forma mais pesada é passar a palavra private na propriedade
private nickname //ou seja eu digo que ele é privado.
Nenhum lugar externo vai conseguir chamar ou alterar

coloque no nickname a palavra private, ele vai retornar um erro:
A propriedade 'nickname' é particular e somente é acessível na classe 'CharAccount'

Como assim?
Crie um novo metodo logCharDetails, não vai receber nada e vai retornar um void, que vai ser um console.log

logCharDetais(): void {
        console.log(`O Jagador ${this.name}, tem o personagem ${this.nickname} e tá no nivel ${this.level} `)
    }

E comente gui.nickname = 'Das' e rode gui.logCharDetails() Não achou Nenhum erro
Ou seja, mesmo com private no nickname ele consegiu chamar sem nenhum problema. Pq?

Pq o private ele me permite chamar a propriedade dentro da class, eu consigo chamar, editar e não terá 
nenhum problema. Mas se eu chamar do lado de fora, não irá funcionar. 

Resumo: O método private é quando não queremos que seja alterado ou lido fora da class

Tbm temos a opção onde permite que esse objeto seja lido, porém não editavel é o readonly

Readonly
em level coloque readonly e depois chame console.log()
console.log(gui.level) //ele irá chamar normalmente
Mas se eu tentar mudar o level?

gui.level = 20
Ele mostrar um erro:
Não é possível atribuir a 'level' porque é uma propriedade de somente leitura.

Public
A a propriedade que ainda não falamos, mas que é implícita é public;
O que é?
É quando ela é publica, ou seja vc pode fazer o quer quiser
public name 
Você pode mudar o nome, chamar o nome. Não tem nenhuma regra.

Protected
O que é?
É quando conseguimos chamar dentro da classe ou da classe que está estendida ela, mas não conseguimos
chamar fora.
Por exemplo: temos protected age e na classe que tá estendendo chame age

Apesar de ser protegida eu consigo chamar pela class que tá estendida, mas se eu quiser chamar a propriedade
age fora ou edita-la, eu não consigo.

Resumo: Só pode ser acessado dentro da class ou subclasses

O protected e o Private são bem parecido, mas a diferença é que o private só é possível dentro daquela class.


Resumão:

Private: alterado ou lido fora da class;
Readonly: Pode ser lido fora da class, mas não pode ser alterado;
Public: Você pode fazer o que quiser. Pode ser lida/alterado dentro e fora da class/subclasses;
Protected: Só pode ser acessado dentro da class ou subclasses


-> Set e Get

Basicamente temos esses dois métodos 
get 
set 

onde conseguimos pegar valores e propriedades dentro da nossa class.
Por exemplo, vamos criar um get getLevel, o retorno é level

Como chamamos esse método? 
o getLevel é da class CharAccount, então eu chamo no console.log gui.getLevel
Não precisa passar como function() e sim como se fosse uma propriedade mesmo.
O seja o get vc pode criar por exemplo uma regra de validação, um log...
por exemplo no get coloque console.log

Resumo: o Get funciona na hora que é chamado como se fosse uma propriedade, mas na verdade é uma function
com mais informação. 


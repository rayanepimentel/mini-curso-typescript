- Types

A parte mais importar de TypeScript: Como criar os types.

Primeira coisa vamos criar um novo arquivo: type.ts
Vamos falar sobre tipos, existe os tipos que já conhecemos os primitivos e os novos 
que o TypeScript implementou.

-> Boolean

O primeiro tipo que iremos aprender é o boolean, que já conhecemos.
Boolean só pode retornar 2 valores, true ou talse;
Por exemplo, nomei uma variável que receba o valor booleano e depois em algum momento
eu posso passar essa var como false ou true.

Passe o valor da var que declamos para true, mas entre aspas.
erro: O tipo '"true"' não pode ser atribuído ao tipo 'boolean'
Pq ele é uma string e não um boolean

-> String

A string pode ser representado de três formas, 'foo', "foo" e `foo`
e dentro ` ` podemos passar o boolean, pois ele reconhece que tudo dentro ` ` é uma string


-> Number

Funciona para int, float, hexadecimal e binário

-> Array

Para definir o array é um pouquinho diferente.
Digamos que temos um let items, eu digo que é um array, mas eu preciso informar o que tem dentro 
daquele array
let items: number[]
items: [1, 2, 3]
Se você mudar mumber para string, dará erro, pq estamos dizendo que o array é uma string, mas estamos
passando números. 
let items: string[]
Ou seja O tipo 'number' não pode ser atribuído ao tipo 'string'

Existe outra forma, informamos para a nossa var que é um Array<type>
let itemA: Array<number>
itemA = [1, 2, 3]

-> Tuple

Um tipo novo, mas nada mais é que um array, onde já sabemos o número de elementos dentro desse array e 
também o tipo dele.
Temos uma let title e dizemos que é uma tupla
Eu digo que é um array, mas só que eu já sei o que vai ter ali dentro.
Ex: primeiro valor é um numero e o segundo é uma string
let title: [number, string]
title = [1, 'foo']

-> Type enum

O que é um enum?
É um enumeration que server para criamos um conjunto de chave e valor.
Digamos qque temos um select cms que as pessoas precisam selecionar as cores. Mas a pessoa é leiga
e não sabe hexadecimal, ela só saber roxo, verde, azul..
Nesse caso podemos usar o enum, passamo a chave com o valor bonitinho e o valor final na realidade
é o hexadecimal.

ex:

enum Colors {
    white = '#fff',
    black = '#000'
}

enum basicamente serve para criamos um conjunto de chave e valor, para encontramos uma chamada mais fácil
o valor que desejamos.

-> Type any

Any é o tipo mais exclusivo do TypeScript
O any significa qualquer coisa

Ex:

let coisa: any
//eu posso atribuir coisa, qualquer coisa
//Pode ser boolean, string, number, array
coisa = 1 

Mas não é legal, pq estamos dizendo que é qualquer coisa é a mesma coisa que não 
falarmos nada dela.

let coisa
coisa = true

Ou seja, é qualquer coisa. A ideia de tipar a var acaba morrendo

-> Type void

Void é o mesmo que vazio.
É quando não retorna nada, não tem retorno
O void é para tipar funções que não retorna nada.

function logger() {
    console.log('foo')
}

-> Type null | undefined

É basicamente quando não sabemos o valor, valor não foi definido.

-> Type never

É o tipo que dizemos que nunca irá retornar.
É basicamente quando iremos jogar um erro na tela throw

throw new Error("error");
Estamos falando, isso ai vai jogar um novo erro.

criamos uma função
function error, eu posso dizer que ela nunca vai retornar

function error(): never {
    throw new Error("error");
}

Estamos dizendo que essa função nunca irá retornar, ela só vai jogar o erro na tela


-> Type object

É tudo aquilo que não é string, array, number e nem boolean, é qualquer coisa que
não seja nenhum desses tipos primitivos.

let cart: object

se passarmos true, ele vai informar que tá erradi
cart = true

mas se passarmos key: 123 ele vai funcionar, pq é um object

cart = {
    key: 123
}